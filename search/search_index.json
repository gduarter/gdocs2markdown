{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Coding_Tutorials/","text":"Mobley Group Coding Tutorials # This directory has Google docs with instructions and links to tutorials for good coding practices. This file includes links to potentially useful tutorials and resources. Please feel free to add resources to this document or contact the person incharge of github/coding training (currently Caitlin) with any questions or recommendations. A note on formatting, since Google doesn\u2019t have an easy way to insert a coding font (such as `code text` in slack or markdown), those will be colored pink here instead, and tabbed in if it is a block of code at once, for example: import numpy as np a = np.array([1,2,3]) print(a**2) Included in this Directory # Anaconda This file contains instructions on downloading anaconda, setting up environments, and a bit of explanation on why having separate python environments is good practice. IDE Integrated Development Environment (IDE) is the program where you actually do your coding. VIM, Atom, and PyCharm are favorites in our group, but ther are many others. This file has a list of IDEs including some pros, cons, and who has experience with each. Jupyter Notebooks Jupyter Notebooks are a web application that allow you to use python code live with substantial documentation. These are very useful for testing new code and visualizing results. It is typically good practice to make some jupyter notebooks as examples of any python modules you create. GitHub Tutorials This is a folder full of our GitHub tutorial, instructions, and recommendations. Included are introductions for new users and basic instructions for how to organize a repository. Every project is a little different, but we also have recommendations for how to use issues, pull requests, and other GitHub features. MarkDown MarkDown (files ending in .md) is an enhanced text format that is used in Github and Jupyter notebooks. This file includes some basic instructions and links to helpful MD cheatsheets. Write_pythonic_code_like_a_seasoned_developer This is a Jupyter notebook Caitlin Bannan made while taking the Talk Python tutorial with the same name Python Data Structure Look Up This is essentially just a big table with different python modules that we find helpful. This inlcudes a brief description of what it is used for and a links to tutorials and/or documentation pages Python Tutorials Outside This Directory # Real Python This is a blog I recently discovered that has great examples and explanations of just about everything you want to know about python, great place to look if you want to understand something better. They also have some courses behind a pay wall that I can\u2019t speak to Codecademy Code Academy provides low level introductory courses for a variety of languages, if you have no coding experience this is a good starting point. Talk Python These are paid tutorials, but provide indepth introductions to more complex coding concepts including pythonic styling and documentation. San Diego Python This is a group of Python developers in San Diego who maintain a list of recommended tutorials, videos, and online classes for new Python users. If you think any of them are particularly useful please add them to this list Coding Style Resources # Coding style is important in python (and all languages). Following the style expected by other developers makes your code easier to read, understand, and use. Many of the the python tutorials listed above also include instructions on Style, but here are some other resources which more specifically address it: GitHub Resources # We\u2019ve included here a series of tutorial/instruction files for GitHub. However, GitHub is a popular resource used by many groups, developers, and companies so there are a lot of online resources as well. See Getting Started in the GitHub Tutorials folder for more online resources, also when in doubt google for what you want to do there is probably a Git command for it. Tutorials for Other Tools and Languages # Our group primarily works in Python, but if you\u2019re looks for other resources hopefully we have a place to start C++ # C++ programming for Quantum Chemistry Tutorial This one came from Daniel Crawford\u2019s group at Virginia Tech, they are primarily a QM group, but this tutorial includes a decent fundamentals introduction to the language. Also, working on science projects are likely more interesting than just learning how to print \u201cHello World\u201d More General C++ tutorials, not specific to scientific computing http://www.learncpp.com/ http://www.learn-cpp.org/ Docker # What is Docker and How to Use it With Python (Tutorial) [CCB] I haven\u2019t actually read this yet, I\u2019ve been wanting to learn about Docker and this looks like an easy to follow tutorial.","title":"README"},{"location":"Coding_Tutorials/#mobley_group_coding_tutorials","text":"This directory has Google docs with instructions and links to tutorials for good coding practices. This file includes links to potentially useful tutorials and resources. Please feel free to add resources to this document or contact the person incharge of github/coding training (currently Caitlin) with any questions or recommendations. A note on formatting, since Google doesn\u2019t have an easy way to insert a coding font (such as `code text` in slack or markdown), those will be colored pink here instead, and tabbed in if it is a block of code at once, for example: import numpy as np a = np.array([1,2,3]) print(a**2)","title":"Mobley Group Coding Tutorials"},{"location":"Coding_Tutorials/#included_in_this_directory","text":"Anaconda This file contains instructions on downloading anaconda, setting up environments, and a bit of explanation on why having separate python environments is good practice. IDE Integrated Development Environment (IDE) is the program where you actually do your coding. VIM, Atom, and PyCharm are favorites in our group, but ther are many others. This file has a list of IDEs including some pros, cons, and who has experience with each. Jupyter Notebooks Jupyter Notebooks are a web application that allow you to use python code live with substantial documentation. These are very useful for testing new code and visualizing results. It is typically good practice to make some jupyter notebooks as examples of any python modules you create. GitHub Tutorials This is a folder full of our GitHub tutorial, instructions, and recommendations. Included are introductions for new users and basic instructions for how to organize a repository. Every project is a little different, but we also have recommendations for how to use issues, pull requests, and other GitHub features. MarkDown MarkDown (files ending in .md) is an enhanced text format that is used in Github and Jupyter notebooks. This file includes some basic instructions and links to helpful MD cheatsheets. Write_pythonic_code_like_a_seasoned_developer This is a Jupyter notebook Caitlin Bannan made while taking the Talk Python tutorial with the same name Python Data Structure Look Up This is essentially just a big table with different python modules that we find helpful. This inlcudes a brief description of what it is used for and a links to tutorials and/or documentation pages","title":"Included in this Directory"},{"location":"Coding_Tutorials/#python_tutorials_outside_this_directory","text":"Real Python This is a blog I recently discovered that has great examples and explanations of just about everything you want to know about python, great place to look if you want to understand something better. They also have some courses behind a pay wall that I can\u2019t speak to Codecademy Code Academy provides low level introductory courses for a variety of languages, if you have no coding experience this is a good starting point. Talk Python These are paid tutorials, but provide indepth introductions to more complex coding concepts including pythonic styling and documentation. San Diego Python This is a group of Python developers in San Diego who maintain a list of recommended tutorials, videos, and online classes for new Python users. If you think any of them are particularly useful please add them to this list","title":"Python Tutorials Outside This Directory"},{"location":"Coding_Tutorials/#coding_style_resources","text":"Coding style is important in python (and all languages). Following the style expected by other developers makes your code easier to read, understand, and use. Many of the the python tutorials listed above also include instructions on Style, but here are some other resources which more specifically address it:","title":"Coding Style Resources"},{"location":"Coding_Tutorials/#github_resources","text":"We\u2019ve included here a series of tutorial/instruction files for GitHub. However, GitHub is a popular resource used by many groups, developers, and companies so there are a lot of online resources as well. See Getting Started in the GitHub Tutorials folder for more online resources, also when in doubt google for what you want to do there is probably a Git command for it.","title":"GitHub Resources"},{"location":"Coding_Tutorials/#tutorials_for_other_tools_and_languages","text":"Our group primarily works in Python, but if you\u2019re looks for other resources hopefully we have a place to start","title":"Tutorials for Other Tools and Languages"},{"location":"Coding_Tutorials/#c","text":"C++ programming for Quantum Chemistry Tutorial This one came from Daniel Crawford\u2019s group at Virginia Tech, they are primarily a QM group, but this tutorial includes a decent fundamentals introduction to the language. Also, working on science projects are likely more interesting than just learning how to print \u201cHello World\u201d More General C++ tutorials, not specific to scientific computing http://www.learncpp.com/ http://www.learn-cpp.org/","title":"C++"},{"location":"Coding_Tutorials/#docker","text":"What is Docker and How to Use it With Python (Tutorial) [CCB] I haven\u2019t actually read this yet, I\u2019ve been wanting to learn about Docker and this looks like an easy to follow tutorial.","title":"Docker"},{"location":"Coding_Tutorials/Anaconda/","text":"This file will have instructions on how to download anaconda and set up environments with links to everything you need and rational for different python environments.","title":"Anaconda"},{"location":"Coding_Tutorials/IDE/","text":"IDE stands for integrated development environment, that is the software you use for writing code, for example vim, xcode, atom, etc. Here is a list of free options that at least one person in our group uses. Feel free to add others and why you like them. VIM This is a very bare bones text editor environment, there are plugins you can get for autocomplete or other features. Their main website is a bit dated, but there is a lot on StackOverflow and other online discussion forums for all your questions. Used by Caitlin, Guilherme, Dr. Mobley, Victoria, Jessica, Nathan, Sam? Make sure your .vimrc file has all required settings, see Caitlin\u2019s example file on github: https://github.com/MobleyLab/SharedScripts/blob/master/Caitlin/vimrc Atom Open source IDE created by the github developers Used by Dr. Mobley, Nathan, PyCharm Paid and free community version, a favorite of python programmers at OpenEye where Caitlin started using it. It uses your python environment to allow for autofill including custom python packages, also includes spelling and syntax checking, and an easily customizable format for coloring and how to highlight errors. This includes, sometimes helpful statements about why something is syntactically incomplete. Note - the syntax checking and autocomplete work with your custom python environment so you have classes you\u2019ve built or other people have in specified environment it will look for those as well. XCode Common with apple users [CCB] - that\u2019s all I know. Used by Camila Emacs This is another command line tool for simple text editting. [CCB] - that\u2019s all I know. Used by no one currently (I think) Most people use more than one: # Bigger IDE\u2019s such as PyCharm and Atom aren\u2019t practical if you\u2019re only making small changes, so it is best to be familiar with a commandline accessible tool such as vim so you can make quick changes (this is especially important when working on green planet or other clusters since you probably won\u2019t have access to your other tools). If you\u2019re going to be working on larger coding projects however, a tool that comes with spelling/syntax checking and autocomplete will make your life a lot easier.","title":"IDE"},{"location":"Coding_Tutorials/IDE/#most_people_use_more_than_one","text":"Bigger IDE\u2019s such as PyCharm and Atom aren\u2019t practical if you\u2019re only making small changes, so it is best to be familiar with a commandline accessible tool such as vim so you can make quick changes (this is especially important when working on green planet or other clusters since you probably won\u2019t have access to your other tools). If you\u2019re going to be working on larger coding projects however, a tool that comes with spelling/syntax checking and autocomplete will make your life a lot easier.","title":"Most people use more than one:"},{"location":"Coding_Tutorials/Jupyter_Notebooks/","text":"This is just an empty file so Caitlin remembers to write/copy a tutorial on how to use jupyter notebooks.","title":"Jupyter_Notebooks"},{"location":"Coding_Tutorials/MarkDown/","text":"README.md files, issues, pull request comments, etc. on github all use the mark down syntax for formating (it is similar, but not completely identical to the markdown used in jupyter notebooks). This is a very helpful MarkDown CheatSheet . Below are a few of the most useful/common syntax used in our projects: Titles start with a \u201c#\u201d the more \u201c###\u201ds the lower the subtitle Indicate code with `code` or multiple lines of code with ```lines of code``` Make check boxes with \u201c- [ ]\u201d at the beginning of a line (note the quotes are so a checkbox isn\u2019t created in github) \u201c *\u201d or \u201c-\u201d makes a bullet point when at the front of a line \u201c- [ ]\u201d makes a checkbox and \u201c- [X]\u201d is a checked off checkbox Note you can click on these, they don\u2019t appear like a [ ] \u201c>\u201d at the front of a line to quote something said above [word to appear](url) will make the \u201cwords to appear\u201d be a link to the specified url \\~\\~Scratch this.\\~\\~ results in strike through italics *1asterisks* or _1underscore_ bond **2asterisks** or __2underscores__ \"\\\" allows you to insert any of the characters above, so if you want to actually show an underscore and not bold the text use \"\\_\"","title":"MarkDown"},{"location":"GitHub_Tutorials/","text":"Below are a list of the tutorials included in this folder along with a description of each, they are listed in approximately the order we would expect you to need them in, but everyone\u2019s experience will be a little different. GitHub Getting Started GitHub Cloning how to clone a repository, that is get it on your computer and iteract with it from the commandline GitHub Working Locally This tutorial focuses on Git and how you can use it to access GitHub repositories from the command line. It includes instructions for creating and using branches, pushing and pull changes, and some other generally helpful commands GitHub Creating a Repository How to make a new github repository, either empty or from files you already have on your computer. GitHub Issues This is instructions on how to write Issues in a GitHub repository, not problems with GitHub. Most projects use Issues as a log for requested changes, bug reports, or questions about the code. GitHub Pull Requests Pull Requests are how you move your changes/version of the code into the \u201cmaster\u201d or main version of the c GitHub Forking Forking is a way to make your own copy of an exisiting repository. Some projects require this if you want to submit changes (including RDKit, NumPy, etc). Git Command Glossary This is a list of Git commands with a short explanation of what they do and when you should use them. The main goal for this file is that you can help yourself remember the word for a certain command as some of them are not all that intuitive. ReadTheDocs and Sphinx ReadTheDocs is a tool available for free for public GitHub repositories. It allows you to make a website for your repo (see chemper.readthedocs.io for an example) Sphinx is the python package ReadTheDocs uses to build this website. A note, this tutorial is very basic and the ReadTheDocs is highly customizable. This is just a starting point so you don\u2019t go in blind, but we encourage you to take a look at all the online resources.","title":"README"},{"location":"GitHub_Tutorials/Code_Coverage/","text":"this is an empty file serving as a reminder that instructions need to be written. For now see the main README in Caitlin\u2019s Shapes Repository","title":"Code_Coverage"},{"location":"GitHub_Tutorials/Encrypting_on_Travis/","text":"I\u2019ll put this in the github help google drive eventually Upgrading ruby: https://stackoverflow.com/questions/38194032/how-to-update-ruby-version-2-0-0-to-the-latest-version-in-mac-osx-yosemite If you don\u2019t already have curl: sudo apt-get update sudo apt install curl \\curl -sSL https://get.rvm.io | bash -s stable source \\~/.bash_profile rvm list known long list of possible ruby installations rvm install ruby-2.4.2 long list about what is being installed/configured ruby -v ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin16] sudo gem install travis Fetching and successfully installing a bunch of stuff shoot, I forgot about the extra options, uninstalled sudo gem uninstall travis VTL had gem not found so had to: sudo apt-get install rubygems ( source ) sudo gem install travis -v 1.8.8 --no-rdoc --no-ri Fetching: travis-1.8.8.gem (100%) Successfully installed travis-1.8.8 1 gem installed MUCH shorter than the first time\u2026 VTL got error: ERROR: Error installing travis: ERROR: Failed to build gem native extension. Solved with \u201csudo apt-get install ruby-dev\u201d beforehand If you forget the options of --no-rdoc and --no-ri you can remove this manually with \u201csudo rm -rf `gem env gemdir`/doc\u201d travis version 1.8.8 VTL got error: Traceback (most recent call last): 2: from /usr/local/bin/travis:23:in `\\<main>' 1: from /usr/lib/ruby/2.5.0/rubygems.rb:308:in `activate_bin_path' /usr/lib/ruby/2.5.0/rubygems.rb:289:in `find_spec_for_exe': can't find gem travis (>= 0.a) with executable travis (Gem::GemNotFoundException) But it seemed the installer needed to finish when I tried this command again in a NEW terminal. travis login --auto Successfully logged in as bannanc! cp \\~/anaconda3/licenses/oe_license.txt . travis encrypt-file oe_license.txt Note, if you\u2019ve changed names at any point you might have set the repository with the -R option, for example travis encrypt-file oe_license.txt -R MobleyLab/chemper Run this command inside the git repository. VTL decided to not add the --add command and chose to update .travis.yml file manually. The automatic addition removes commented descriptions in the existing .travis.yml file. Detected repository as MobleyLab/off_nitrogens, is this correct? |yes| encrypting oe_license.txt for MobleyLab/off_nitrogens storing result as oe_license.txt.enc storing secure env variables for decryption Please add the following to your build script (before_install stage in your .travis.yml, for instance): openssl aes-256-cbc -K $encrypted_ff9126da2177_key -iv $encrypted_ff9126da2177_iv -in oe_license.txt.enc -out oe_license.txt -d Pro Tip: You can add it automatically by running with --add. Make sure to add oe_license.txt.enc to the git repository. Make sure not to add oe_license.txt to the git repository. Commit all changes to your .travis.yml When things don\u2019t work try adding the options \u2014debug and \u2014explode to the encrypt line so the first command would be travis encrypt-file oe_license.txt -R MobleyLab/chemper --debug --explode","title":"Encrypting_on_Travis"},{"location":"GitHub_Tutorials/GitHub_Cloning/","text":"Below are instructions for how to clone a repository, thats GitHub lingo for making a directory on your computer that is linked to your repository on GitHub. Before you clone, you might need to consider Forking follow the questions belore: Did you create this repository? Don\u2019t fork it Is this a repository for our group or the open force field group? Don\u2019t fork it Is this a repository for another collaboration? Are you going to make changes to the code? You should check the owners development policy before you clone, you might need to fork it . You\u2019re just going to use the code and have no plans to make changes? Don\u2019t fork it. Is this a repository from a completely outisde group? Are you going to make changes to the code? Fork It Not changing the code: You don\u2019t need to fork it, but you might want to consider downloading a specific version of the code rather than cloning a repository that is in development. We have a file describing how to fork a repository here . Cloning? # There is a button on the top of your repository\u2019s webiste for \u201cClone or download\u201d You\u2019ll want to copy the ssh key Move to your terminal and enter the command Git clone [paste copied key here] You should see something like this output: This process will create a directory with the name of your repository, you can cd into it and then start working locally","title":"Cloning"},{"location":"GitHub_Tutorials/GitHub_Cloning/#cloning","text":"There is a button on the top of your repository\u2019s webiste for \u201cClone or download\u201d You\u2019ll want to copy the ssh key Move to your terminal and enter the command Git clone [paste copied key here] You should see something like this output: This process will create a directory with the name of your repository, you can cd into it and then start working locally","title":"Cloning?"},{"location":"GitHub_Tutorials/GitHub_Creating_a_Repository/","text":"This section includes instructions for how to create a new GitHub repository. Start on GitHub # Click on the octocat symbol in the top left corner to get to your newsfeed On the left select \u201cNew repository\" This will open a screen with options for your repository: Owner: You should probably put it on the MobleyLab group or another Collaboration group so that when you graduate others will still have easy access to the repository. If it is for personal use or you\u2019re writing a paper, then your personal account is also fine You can change Owners on github repos Repository Name If this is a python project you probably want to follow python style/syntax. That is all lowercase and _ between words and be careful with special characters Otherwise, choose whatever you want. Note - Repository names can also be changed, but fixing your settings when you do it can be complicated so best to think through this before making the repo Description This is a short blurb at the top of your repository, it isn\u2019t required, but if you chose to write something make sure to keep it clear and consise and remember a user might read this before seeing your README since this is at the top. Public or Private If this repository if for a project in the group, you probably want it to be public. Check with Dr. Mobley or other grad students/post docs on the project if you aren\u2019t sure If you\u2019re creating a personal repository, its up to you, some things to consider: If this code would be useful to other people in the community then you should make it public. How would you feel if a potential employer or collaborator stumbled upon this directory. If you don\u2019t want them to see whatever you\u2019re doing here, make it private Now there are two options, do you want to create a repository with initial files that is otherwise empty or do you want to start from an exisiting directory on your desktop. Below are directions for both options, if this is your first time starting with Include initial files is probably better. Include Initial Files # After clicking a new repository, you have the option of including a few default files. For a new user this is usually the best option because some of these files are essential to getting code to work correctly. Initialize this repository with a README Usually it is best to do this, the initial README.md file will only have the name of the repository, but it gaurentees that one is included in your repository. Add .gitignore You want to include this. It tells git not to track changes for files that aren\u2019t essential to your code. For example, if you\u2019re using python, you don\u2019t want to track changes in a *.pyc file! Chose the file type based on the coding language you\u2019re working in. (There are gitignore files for almost every language include TeX if you\u2019re writing a paper). Add a license If there is no license for your code then technically people are not allowed to use it. You should always include a license in your repository. Most of the time in our group we use GNU or MIT If this repository is a part of an existing project you\u2019ll want to make sure the license is consistent with the other parts of the project. (for example, the Open Force Field project always uses MIT). Basically both of these licenses say that the code is available free of charge AS IS and that people can do whatever they want with it as long as they site you. Click \u201ccreate repository\" when you\u2019re ready (This will open your repository) Clone your repository to your terminal so you can add files and start working Completely Empty Repository # In this scenario you basically say no initializing a README or including a .gitignore or license file. When you click \u201cCreate repository\u201d github will give you instructions for how to initialize files in your git repository from a directory in your terminal. Note, that you MUST have a license file in order for other people to use your code and .gitignore files are extremely useful so unless your local directory already has these items, I recommend initializing these files and then moving anything you want in the repository into your folder after cloning your repository .","title":"Creating_a_Repository"},{"location":"GitHub_Tutorials/GitHub_Creating_a_Repository/#start_on_github","text":"Click on the octocat symbol in the top left corner to get to your newsfeed On the left select \u201cNew repository\" This will open a screen with options for your repository: Owner: You should probably put it on the MobleyLab group or another Collaboration group so that when you graduate others will still have easy access to the repository. If it is for personal use or you\u2019re writing a paper, then your personal account is also fine You can change Owners on github repos Repository Name If this is a python project you probably want to follow python style/syntax. That is all lowercase and _ between words and be careful with special characters Otherwise, choose whatever you want. Note - Repository names can also be changed, but fixing your settings when you do it can be complicated so best to think through this before making the repo Description This is a short blurb at the top of your repository, it isn\u2019t required, but if you chose to write something make sure to keep it clear and consise and remember a user might read this before seeing your README since this is at the top. Public or Private If this repository if for a project in the group, you probably want it to be public. Check with Dr. Mobley or other grad students/post docs on the project if you aren\u2019t sure If you\u2019re creating a personal repository, its up to you, some things to consider: If this code would be useful to other people in the community then you should make it public. How would you feel if a potential employer or collaborator stumbled upon this directory. If you don\u2019t want them to see whatever you\u2019re doing here, make it private Now there are two options, do you want to create a repository with initial files that is otherwise empty or do you want to start from an exisiting directory on your desktop. Below are directions for both options, if this is your first time starting with Include initial files is probably better.","title":"Start on GitHub"},{"location":"GitHub_Tutorials/GitHub_Creating_a_Repository/#include_initial_files","text":"After clicking a new repository, you have the option of including a few default files. For a new user this is usually the best option because some of these files are essential to getting code to work correctly. Initialize this repository with a README Usually it is best to do this, the initial README.md file will only have the name of the repository, but it gaurentees that one is included in your repository. Add .gitignore You want to include this. It tells git not to track changes for files that aren\u2019t essential to your code. For example, if you\u2019re using python, you don\u2019t want to track changes in a *.pyc file! Chose the file type based on the coding language you\u2019re working in. (There are gitignore files for almost every language include TeX if you\u2019re writing a paper). Add a license If there is no license for your code then technically people are not allowed to use it. You should always include a license in your repository. Most of the time in our group we use GNU or MIT If this repository is a part of an existing project you\u2019ll want to make sure the license is consistent with the other parts of the project. (for example, the Open Force Field project always uses MIT). Basically both of these licenses say that the code is available free of charge AS IS and that people can do whatever they want with it as long as they site you. Click \u201ccreate repository\" when you\u2019re ready (This will open your repository) Clone your repository to your terminal so you can add files and start working","title":"Include Initial Files"},{"location":"GitHub_Tutorials/GitHub_Creating_a_Repository/#completely_empty_repository","text":"In this scenario you basically say no initializing a README or including a .gitignore or license file. When you click \u201cCreate repository\u201d github will give you instructions for how to initialize files in your git repository from a directory in your terminal. Note, that you MUST have a license file in order for other people to use your code and .gitignore files are extremely useful so unless your local directory already has these items, I recommend initializing these files and then moving anything you want in the repository into your folder after cloning your repository .","title":"Completely Empty Repository"},{"location":"GitHub_Tutorials/GitHub_Forking/","text":"Forking a repository Forks are a way of making a copy of a project to work on. They can let you \u2018fork\u2019 off of a project and develop separately, and are often preferred for large projects with multiple people working on them. BUT, in projects with certain types of automated testing it can be preferred to use a branch rather than a fork. Find out what is preferred for the project you are involved in. In projects with many people we use often use forks to help prevent people from making conflicting edits to the same branch With the fork model, it is important to keep track of the \"upstream\" repository (the original project) The repository you fork from will be called the \u201cupstream\u201d for clarity here and your fork is \u201corigin\" This will require making a completely different repository on github before cloning it to your desktop On the github website for the project chose the fork button in the top right corner Copy the link (under Clone or download) and clone to your desktop with \u201cgit clone [paste location]\" You can make whatever changes you want on this fork and push them to the \u201corigin master\u201d or your local master branch without ever interacting with the upstream fork Next we will create a remote that will connect your fork to the upstream fork Copy the link (under Clone or download) for the upstream project you can check your remote connection with \u201cgit remote -v\" add the upstream fork to your remote with \u201cgit remote add [fork name] [paste location]\u201d You always want to be in agreement with the upstream fork, here are two options for how to get changes from the upstream. pulling or fetching","title":"Forking"},{"location":"GitHub_Tutorials/GitHub_Getting_Started/","text":"What is GitHub # GitHub is a website for storing and editing code, it includes a lot of diverse functionality that allow for multiple programer to work on the same project. The biggest benefit is complete version control. Why our group uses GitHub because it ... # simplifies collaborating on code, allowing multiple people to work on the same project makes it easy to give and receive feedback on your code makes your code available to the community at large, you can site GitHub repositories and allows you to share projects that haven\u2019t been published in a journal with collaborators and others in the field. Your code is more likely to be used if it is easy to find. includes an easy to use \u201cIssue Tracker\u201d that lets you and anyone else highlight problems or planned changes to the code, we use these as checklists for projects and a way to report bugs. provides a platform to automatically test code gaurenteeing your code in the current form works the way you think it should. Create A GitHub Account # Make an account on github.com make sure to use your uci.edu e-mail Follow this link to get the Student Developer Pack This includes unlimited private repositories List your user name on the Research Group GitHub usernames note on Evernote Tell D. Mobley you've done this so he gets you connected with the Mobley Lab group on GitHub Syncing Your Account # This section will have instructions for how to tell github your computer has permission to make changes on your account, you can do this for multiple computers and your green planet account. For now follow the instructions here: https://help.github.com/articles/connecting-to-github-with-ssh/ Where do I go Next # This directory includes documentation from the group. It is mained by the current github/infrastructure training person (currently Caitlin). If you have questions about anything posted here talk to them. Feel free to update any of the writing if you find it to be more clear. Your next step depends on how you\u2019re going to start using Github: If you\u2019re joining an existing project or one of the older graduate students already made a repository, check out Cloning a Repository and then Working in your repository If you are starting a new project, you\u2019ll need to Create a New Repository Outside Resources # Git and GitHub are hugely popular tools, while our notes and instructions attempt to provide you with enough instruction to work within the group, you will inevitably have more questions. The Internet has a ton of resources, below is a short list of ones people in our group thought might be useful, if you find others please add them. Link Format Why this resource/What is covered Git and Github for Poets YouTube Video I have not watched more than 5 minutes of the first video, but this series was made to introduce someone completely outside the world of coding to Git/GitHub. It is an 11 video series that covers everything from why you would want to use GitHub to resolving conflicts when making changes GitHub Learning Lab Video and written tutorials You have to sign up for GitHubLearning Lab with your github account, but it has tutorials for how to use git, github, and markdown Resources to Learn Git Tutorial provided by GitHub to learn Git These tutorials are intended for learning Git, the language you use to interact with github from your terminal How To Use Version Control Udacity course This is a free course from Udacity on Git and GitHub, it looked potentially useful, but also like overkill. If following a class like structure is helpful for you this could be good, but I wouldn\u2019t recommend spending too much Advanced Git Tips for Python Developers Blog post This seemed like a good resource if you\u2019re looking to understand some of the finer points of Git and everything you can do with it. Working on shared projects (an argument for GitHub): # Many projects are shared among multiple people (which is part of the point of git and github) Git can help with collaboration management on shared projects and helps to prevent you making conflicting changes. It also helps with merging conflicts when they occur There are two main models for working on shared project: The \"branch-pull-merge\" model, where you create a branch within the original repository (see \"branching\", below), work on it, and then create a \"pull request\" to have your changes included in the master branch when you are ready We disfavor this model in favor of fork-pull-merge except when testing concerns dictate it or when the project is small The \"fork-pull-merge\" model, where you create your own fork or copy of the repository (see \"forking\", below), work on it, and then create a \"pull request\" to have your changes included in the master branch when you are ready In general we prefer this model except when testing concerns dictate the branch-pull-merge model Notifications # Don't want GitHub notifications in your e-mail? Create a private slack channel with a custom e-mail address and set that as your GitHub secondary e-mail address to get your notifications in Slack.","title":"Getting_Started"},{"location":"GitHub_Tutorials/GitHub_Getting_Started/#what_is_github","text":"GitHub is a website for storing and editing code, it includes a lot of diverse functionality that allow for multiple programer to work on the same project. The biggest benefit is complete version control.","title":"What is GitHub"},{"location":"GitHub_Tutorials/GitHub_Getting_Started/#why_our_group_uses_github_because_it","text":"simplifies collaborating on code, allowing multiple people to work on the same project makes it easy to give and receive feedback on your code makes your code available to the community at large, you can site GitHub repositories and allows you to share projects that haven\u2019t been published in a journal with collaborators and others in the field. Your code is more likely to be used if it is easy to find. includes an easy to use \u201cIssue Tracker\u201d that lets you and anyone else highlight problems or planned changes to the code, we use these as checklists for projects and a way to report bugs. provides a platform to automatically test code gaurenteeing your code in the current form works the way you think it should.","title":"Why our group uses GitHub because it ..."},{"location":"GitHub_Tutorials/GitHub_Getting_Started/#create_a_github_account","text":"Make an account on github.com make sure to use your uci.edu e-mail Follow this link to get the Student Developer Pack This includes unlimited private repositories List your user name on the Research Group GitHub usernames note on Evernote Tell D. Mobley you've done this so he gets you connected with the Mobley Lab group on GitHub","title":"Create A GitHub Account"},{"location":"GitHub_Tutorials/GitHub_Getting_Started/#syncing_your_account","text":"This section will have instructions for how to tell github your computer has permission to make changes on your account, you can do this for multiple computers and your green planet account. For now follow the instructions here: https://help.github.com/articles/connecting-to-github-with-ssh/","title":"Syncing Your Account"},{"location":"GitHub_Tutorials/GitHub_Getting_Started/#where_do_i_go_next","text":"This directory includes documentation from the group. It is mained by the current github/infrastructure training person (currently Caitlin). If you have questions about anything posted here talk to them. Feel free to update any of the writing if you find it to be more clear. Your next step depends on how you\u2019re going to start using Github: If you\u2019re joining an existing project or one of the older graduate students already made a repository, check out Cloning a Repository and then Working in your repository If you are starting a new project, you\u2019ll need to Create a New Repository","title":"Where do I go Next"},{"location":"GitHub_Tutorials/GitHub_Getting_Started/#outside_resources","text":"Git and GitHub are hugely popular tools, while our notes and instructions attempt to provide you with enough instruction to work within the group, you will inevitably have more questions. The Internet has a ton of resources, below is a short list of ones people in our group thought might be useful, if you find others please add them. Link Format Why this resource/What is covered Git and Github for Poets YouTube Video I have not watched more than 5 minutes of the first video, but this series was made to introduce someone completely outside the world of coding to Git/GitHub. It is an 11 video series that covers everything from why you would want to use GitHub to resolving conflicts when making changes","title":"Outside Resources"},{"location":"GitHub_Tutorials/GitHub_Getting_Started/#working_on_shared_projects_an_argument_for_github","text":"Many projects are shared among multiple people (which is part of the point of git and github) Git can help with collaboration management on shared projects and helps to prevent you making conflicting changes. It also helps with merging conflicts when they occur There are two main models for working on shared project: The \"branch-pull-merge\" model, where you create a branch within the original repository (see \"branching\", below), work on it, and then create a \"pull request\" to have your changes included in the master branch when you are ready We disfavor this model in favor of fork-pull-merge except when testing concerns dictate it or when the project is small The \"fork-pull-merge\" model, where you create your own fork or copy of the repository (see \"forking\", below), work on it, and then create a \"pull request\" to have your changes included in the master branch when you are ready In general we prefer this model except when testing concerns dictate the branch-pull-merge model","title":"Working on shared projects (an argument for GitHub):"},{"location":"GitHub_Tutorials/GitHub_Getting_Started/#notifications","text":"Don't want GitHub notifications in your e-mail? Create a private slack channel with a custom e-mail address and set that as your GitHub secondary e-mail address to get your notifications in Slack.","title":"Notifications"},{"location":"GitHub_Tutorials/GitHub_Issues/","text":"Issue tracking Issues are associated with github repositories and allow you to keep track of \"issues\" such as bugs, future development plans, and so on. Major purposes are to: organize who is addressing current problems with a project plan changes (major and minor) keep track of changes which will be made in general, keep a permanent record of the development of a project so that it can be understood what changes were made, why, and by whom Issues normally should interact with pull requests -- specifically, the normal development process is: an issue is raised to bring up a problem or plan development the issue is used to make plans someone begins development in a branch or fork and opens a pull request to master labeled \"[WIP] Implement partial bond orders as discussed in issue #53\" (for example), where [WIP] stands for \"work in progress\" This allows people to see, comment on, and help with resolution of the issue It keeps a record of exactly how the issue was dealt with When the issue is resolved, \"[WIP]\" is removed from the title of the pull request, the issue is closed, and the pull request is merged, bringing the changes into master Find issues on the \u201cIssues (#)\u201d tab on the github website Good Practice - try to keep issue limited to one problem or to several issues which are so closely related that they would best be dealt with by a single person in a single set of changes When creating an issue leave detailed comments about what is happening or what the problem that needs to be addressed is Attach files or supporting materials to allow exact reproduction of the file Code can be provided by using single quotes to indicate it is `code'; triple single quotes can be used to set off ```larger blocks of code''' that can span multiple lines (though you want your opening quotes on an empty line and your closing quotes on another empty line) You can assign a specific person to address an Issue: Or chose \u201cassign yourself\u201d to assign yourself to be in charge of addressing the issue Good Practice - you should use pull requests to close issues. You can link a pull request to the issue by referring to it by number with (#number) this is an issue If I was going to try to close it with a pull request I would put \u201cThis addresses issue #1\u201d in the pull request so they are linked Ideally, use names which describe what the pull request does, unlike the example above -- for example, \"Ensure molecules retain the correct net charge\" or something similar","title":"Issues"},{"location":"GitHub_Tutorials/GitHub_Pull_Requests/","text":"When you are satisfied with your changes you can use a pull request to submit your changes to the upstream branch, this will show you if there are any discrepancies between your local fork and the upstream fork that need to be addressed before merging. You can submit pull requests to any fork and branch in the system. This will depend on your project and how the people you are working with want to do things, if it\u2019s not clear ask, but most likely: One fork project it will be from your branch to the master Multi fork project: from [your name]/branch to the most [upstream owner]/master Create the Pull Request # Creating a pull request on a fork is the same as on a branch, go to the github website Click on the Pull Request Tab click \u201cnew pull request\u201d button on the top right: Then choose which forks and branches you wish to merge, add a title, description and click \u201cCreate pull request\" Detailed instructions for what to include in these sections can be seen below If you make more commits to your local branch those changes will automatically be added to this pull request as long as the pull request is open! It is important to remember this so if you want to start making new changes that you don\u2019t want these new changes included on this PR you should make a new branch and make your new changes there. It is bad practice to merge your own pull requests, in face most repositories will have it set so that this is impossible. Below are details for what you should include in the different parts of a Pull Request # PR Title # PR Description # Reviews for your PR # Usually, you want to recruit someone with an interest in the project to do code review on your code before it's merged -- this is both a good way to get it checked for mistakes AND get helpful feedback on code development Tests Must Pass # Instructions for tests are available in the Travis CI file, but assuming they are set up correctly, you\u2019ll need the tests to pass before you can merge a Pull Request. Travis-CI is an environment which integrates with GitHub and allows automated testing when code changes are made Tests are automatically run when you use a pull request To see details click on the X or checkmark next to the commit If you want to run these tests on the command line navigate to the directory \u201ctests\u201d (it could be in a sub-directory) Command: nosetest -v Resolving Conflicts # If your branch is out of date with the mast you will receive a warning that the branch cannot be merged due to conflicts: You will need to pull the master branch into your local branch and resolve any conflicts. See the Update your Local Repository Section of Working Locally for details","title":"Pull_Requests"},{"location":"GitHub_Tutorials/GitHub_Pull_Requests/#create_the_pull_request","text":"Creating a pull request on a fork is the same as on a branch, go to the github website Click on the Pull Request Tab click \u201cnew pull request\u201d button on the top right: Then choose which forks and branches you wish to merge, add a title, description and click \u201cCreate pull request\" Detailed instructions for what to include in these sections can be seen below If you make more commits to your local branch those changes will automatically be added to this pull request as long as the pull request is open! It is important to remember this so if you want to start making new changes that you don\u2019t want these new changes included on this PR you should make a new branch and make your new changes there. It is bad practice to merge your own pull requests, in face most repositories will have it set so that this is impossible. Below are details for what you should include in the different parts of a Pull Request","title":"Create the Pull Request"},{"location":"GitHub_Tutorials/GitHub_Pull_Requests/#pr_title","text":"","title":"PR Title"},{"location":"GitHub_Tutorials/GitHub_Pull_Requests/#pr_description","text":"","title":"PR Description"},{"location":"GitHub_Tutorials/GitHub_Pull_Requests/#reviews_for_your_pr","text":"Usually, you want to recruit someone with an interest in the project to do code review on your code before it's merged -- this is both a good way to get it checked for mistakes AND get helpful feedback on code development","title":"Reviews for your PR"},{"location":"GitHub_Tutorials/GitHub_Pull_Requests/#tests_must_pass","text":"Instructions for tests are available in the Travis CI file, but assuming they are set up correctly, you\u2019ll need the tests to pass before you can merge a Pull Request. Travis-CI is an environment which integrates with GitHub and allows automated testing when code changes are made Tests are automatically run when you use a pull request To see details click on the X or checkmark next to the commit If you want to run these tests on the command line navigate to the directory \u201ctests\u201d (it could be in a sub-directory) Command: nosetest -v","title":"Tests Must Pass"},{"location":"GitHub_Tutorials/GitHub_Pull_Requests/#resolving_conflicts","text":"If your branch is out of date with the mast you will receive a warning that the branch cannot be merged due to conflicts: You will need to pull the master branch into your local branch and resolve any conflicts. See the Update your Local Repository Section of Working Locally for details","title":"Resolving Conflicts"},{"location":"GitHub_Tutorials/GitHub_Working_Locally/","text":"Branching # Branching is one way you can make and save changes without disrupting the overall project. On a group project the \u201cmaster\u201d branch is often protected so people can\u2019t make changes directly to it. This is the most basic way to avoid clashing edits on a shared repository Even if it\u2019s not a shared project, I suggest different branches for your different machines (If you\u2019re going to work at home on a laptop) so that if you forget to push changes at work or home you don\u2019t have conflicting master branches. Here is how to do this from the command line: See current branches \u201cgit branch\" move to another branch \u201cgit checkout [branch name]\" create a new branch \u201cgit checkout -b [branch name]\u201d now you should make changes on your branch and when you\u2019re ready to add those changes push them to your branch instead of master. Remember to first add and commit changes then: \u201cgit push origin [branch name]\u201d Here\u2019s is an example: Now instead of pushing to the master branch, when you\u2019re ready to add your changes to the master branch you should go to the github website and create a pull request This requests that the master branch pull your changes Updating Your Remote Branch # Add your script to your directory (copy from where you were writing before for example) Before you make any changes on your local (desktop) repository, you should pull from the the remote repository (the one on github) with \u201cgit pull origin master\" Note if there are conflicts with your local repository this will raise an error Use \u201cgit status\u201d to see how your local changes compare with the remote repository To get your file ready to add type \u201cgit add [file name]\" You can also do \u201cgit add *\" to add everything that was changed in this directory or \u201cgit add -v *\u201d which will show everything that is being added Commit your changes with \u201cgit commit -m [type an explanation of your changes here]\" If you forget the -m part it will ask for a comment Use brief, informative comments that explain what you changed This stores your changes on your local copy of the repository, but makes no changes on github yet Push your changes to your remote repository (on github) with \u201cgit push origin master\" This will push to the master branch of the originating repository (origin) on github Differences for forks and branches are explained below Generally, DO NOT push to the master branch on a project which is shared If you want to move or remove files already added to the repository you have to use git in front of your command for example: git mv [original file name] [new file name] git rm [file name] Using normal linux mv or rm commands will not have any affect aside from changing your local copies of the files Update your Local Repository # Below are options for how to get changes from your remote directory (the one on github) to your computer. The most common scenario for this is a collaborator has merged a pull request and you need to move those changes into your local repository before you can merge your own pull request. Pulling: # Pulling (as distinct from a \"pull request\") is used to get changes from a remote repository onto your computer and into the branch you currently have checked out If you have no changes in your local fork then you can simply pull from the upstream fork with \u201cgit pull [fork name] [branch name]\u201d for example here \u201cgit pull origin master\u201d Note, origin is the default github name for the fork you cloned from If you have changes in your local fork then pulling may not be ideal; it can result in this kind of output: When I open the conflicting file, this is what the conflicting lines look like: the === marks the difference between the two files You have to resolve these differences before you can do any other merging or pulling. Resolution can be done manually such as in a text editor There are also editors designed specifically for dealing with these types of conflicts (difftool and others) which can be particularly helpful if the conflicts are complicated rather than just content that needs to be moved from one place to another Fetching # Note that these examples were written for a repository with multiple forks. If your repository only has one fork then in most of these cases you\u2019ll want to use origin instead of upstream Fetching, as opposed to pulling, allows for retrieving changes from a remote repository without actually bringing them into your current branch yet you can fetch changes with \"git fetch [fork name] [branch name]\u201d (for a branch) or \"git fetch [fork name]\" for the full set of branches You can see above that there is a new branch called upstream master, it isn\u2019t visible in \u201cgit branch\u201d, but fetch gives you temporary access to look at it. Also your current master is stored in a temporary branch \u201cFETCH_HEAD\" You can see the current changes in upstream master by: \u201cgit checkout upstream/master\u201d Note - you don\u2019t want to make it a new branch (with -b) because it will be ambiguous if you fetch again later and want to check out the fetched branch. You can look at files that may have changed example lines: You can do the same thing with your current local master my looking the master branch: \u201cgit checkout master\u201d example lines in the changed file: When you are ready you can merge these changes: \u201cgit merge upstream/master\u201d (this is for a repository which is a fork) Here are the lines in the merged file Generally Helpful Commands # git status - tells you what the state of your local directory is relative to the remote branch git branch - gives a list of branches for this repository git remote -v - gives a list of remote forks and their names (you can point to other people\u2019s forks of a project, but it\u2019s not necessarily recommended) git checkout origin/[branch name] [filename] - reverts the [filename] to the version in origin/[branch name] For example, you can use this to revert changes of a committed file you could call \"git checkout origin/master filename","title":"Working_Locally"},{"location":"GitHub_Tutorials/GitHub_Working_Locally/#branching","text":"Branching is one way you can make and save changes without disrupting the overall project. On a group project the \u201cmaster\u201d branch is often protected so people can\u2019t make changes directly to it. This is the most basic way to avoid clashing edits on a shared repository Even if it\u2019s not a shared project, I suggest different branches for your different machines (If you\u2019re going to work at home on a laptop) so that if you forget to push changes at work or home you don\u2019t have conflicting master branches. Here is how to do this from the command line: See current branches \u201cgit branch\" move to another branch \u201cgit checkout [branch name]\" create a new branch \u201cgit checkout -b [branch name]\u201d now you should make changes on your branch and when you\u2019re ready to add those changes push them to your branch instead of master. Remember to first add and commit changes then: \u201cgit push origin [branch name]\u201d Here\u2019s is an example: Now instead of pushing to the master branch, when you\u2019re ready to add your changes to the master branch you should go to the github website and create a pull request This requests that the master branch pull your changes","title":"Branching"},{"location":"GitHub_Tutorials/GitHub_Working_Locally/#updating_your_remote_branch","text":"Add your script to your directory (copy from where you were writing before for example) Before you make any changes on your local (desktop) repository, you should pull from the the remote repository (the one on github) with \u201cgit pull origin master\" Note if there are conflicts with your local repository this will raise an error Use \u201cgit status\u201d to see how your local changes compare with the remote repository To get your file ready to add type \u201cgit add [file name]\" You can also do \u201cgit add *\" to add everything that was changed in this directory or \u201cgit add -v *\u201d which will show everything that is being added Commit your changes with \u201cgit commit -m [type an explanation of your changes here]\" If you forget the -m part it will ask for a comment Use brief, informative comments that explain what you changed This stores your changes on your local copy of the repository, but makes no changes on github yet Push your changes to your remote repository (on github) with \u201cgit push origin master\" This will push to the master branch of the originating repository (origin) on github Differences for forks and branches are explained below Generally, DO NOT push to the master branch on a project which is shared If you want to move or remove files already added to the repository you have to use git in front of your command for example: git mv [original file name] [new file name] git rm [file name] Using normal linux mv or rm commands will not have any affect aside from changing your local copies of the files","title":"Updating Your Remote Branch"},{"location":"GitHub_Tutorials/GitHub_Working_Locally/#update_your_local_repository","text":"Below are options for how to get changes from your remote directory (the one on github) to your computer. The most common scenario for this is a collaborator has merged a pull request and you need to move those changes into your local repository before you can merge your own pull request.","title":"Update your Local Repository"},{"location":"GitHub_Tutorials/GitHub_Working_Locally/#pulling","text":"Pulling (as distinct from a \"pull request\") is used to get changes from a remote repository onto your computer and into the branch you currently have checked out If you have no changes in your local fork then you can simply pull from the upstream fork with \u201cgit pull [fork name] [branch name]\u201d for example here \u201cgit pull origin master\u201d Note, origin is the default github name for the fork you cloned from If you have changes in your local fork then pulling may not be ideal; it can result in this kind of output: When I open the conflicting file, this is what the conflicting lines look like: the === marks the difference between the two files You have to resolve these differences before you can do any other merging or pulling. Resolution can be done manually such as in a text editor There are also editors designed specifically for dealing with these types of conflicts (difftool and others) which can be particularly helpful if the conflicts are complicated rather than just content that needs to be moved from one place to another","title":"Pulling:"},{"location":"GitHub_Tutorials/GitHub_Working_Locally/#fetching","text":"Note that these examples were written for a repository with multiple forks. If your repository only has one fork then in most of these cases you\u2019ll want to use origin instead of upstream Fetching, as opposed to pulling, allows for retrieving changes from a remote repository without actually bringing them into your current branch yet you can fetch changes with \"git fetch [fork name] [branch name]\u201d (for a branch) or \"git fetch [fork name]\" for the full set of branches You can see above that there is a new branch called upstream master, it isn\u2019t visible in \u201cgit branch\u201d, but fetch gives you temporary access to look at it. Also your current master is stored in a temporary branch \u201cFETCH_HEAD\" You can see the current changes in upstream master by: \u201cgit checkout upstream/master\u201d Note - you don\u2019t want to make it a new branch (with -b) because it will be ambiguous if you fetch again later and want to check out the fetched branch. You can look at files that may have changed example lines: You can do the same thing with your current local master my looking the master branch: \u201cgit checkout master\u201d example lines in the changed file: When you are ready you can merge these changes: \u201cgit merge upstream/master\u201d (this is for a repository which is a fork) Here are the lines in the merged file","title":"Fetching"},{"location":"GitHub_Tutorials/GitHub_Working_Locally/#generally_helpful_commands","text":"git status - tells you what the state of your local directory is relative to the remote branch git branch - gives a list of branches for this repository git remote -v - gives a list of remote forks and their names (you can point to other people\u2019s forks of a project, but it\u2019s not necessarily recommended) git checkout origin/[branch name] [filename] - reverts the [filename] to the version in origin/[branch name] For example, you can use this to revert changes of a committed file you could call \"git checkout origin/master filename","title":"Generally Helpful Commands"},{"location":"GitHub_Tutorials/Integrated_Testing/","text":"This file is just a place holder, for now see instructions in Caitlin\u2019s Shapes Repo","title":"Integrated_Testing"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/","text":"Readthedocs.org is a website that can be used to host documentation for python (and other languate) software packages. It uses a python package called sphinx to automatically build in examples and documentation from your python package. What is included here # In this file, I will walk you through a minimum example of how to set up a documentation website that is formatted based on one theme ( chemper ). The read the docs website has extensive documentation and there are A TON of different themes out there. This is intended to help you understand how to get started. Disclaimer # Below is a step by step guide, however, there is a STEEP learning curve on Read the Docs and its not particularly intuitive. In this tutorial, we assume you already have a working python package that is installable (see docs on setup files). This is intended to be a guide that shorter and easier to follow than the official Getting Started Guide, but you will likely need to look at outside resources. RST files # Read the docs uses rst (reStructuredText) files. These are similar to MarkDown files (such as those used for GitHub README files and jupyter notebooks), in that they have formatting rules that are interpretted to change the format of the text. However, the formatting is significantly different from MarkDown. This file will not include instruction for this format, but might highlight some examples. Below is a list of links our group (Caitlin) has found useful for how to format these files. http://openalea.gforge.inria.fr/doc/openalea/doc/_build/html/source/sphinx/rest_syntax.html http://docutils.sourceforge.net/docs/user/rst/quickref.html https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst As with all languages it is usually fastest to just google what you want to do and follow the relevant discussion board answers Building Doc Files Locally # We will start on your computer, get some initial files set up before linking the website to your github repository. Download Sphinx and run quickstart # Install Sphinx pip install sphinx sphinx-autobuild sphinx_rtd_theme nbsphinx Make a docs directory to store files From inside the docs folder call sphinx-quickstart . Note that there are a ton of questions with this call, most of them we use the default, but I will put the full list below bolding the ones where I did not chose the default. A side note, the last question is \u201cCreate Windows command file? (y/n) [y]: n\u201d I was taught at MolSSI to say \u201cn\u201d to this and I don\u2019t know anyone on a windows computer to have used this program. You may need these files if you\u2019re going to check your build on a windows machine, I don\u2019t know. When done with this call you\u2019ll have a source/ and build/ directory in the docs directory, DO NOT add the build/ directory to your github, it is only there so you can see your output locally. (chemper_both) gitHub/shapes2 (docs)$ sphinx-quickstart Welcome to the Sphinx 1.7.6 quickstart utility. Please enter values for the following settings (just press Enter to accept a default value, if one is given in brackets). Selected root path: . You have two options for placing the build directory for Sphinx output. Either, you use a directory \"_build\" within the root path, or you separate \"source\" and \"build\" directories within the root path. > Separate source and build directories (y/n) [n]: y Inside the root directory, two more directories will be created; \"_templates\" for custom HTML templates and \"_static\" for custom stylesheets and other static files. You can enter another prefix (such as \".\") to replace the underscore. > Name prefix for templates and static dir [_]: The project name will occur in several places in the built documentation. > Project name: shapes > Author name(s): Caitlin C. Bannan > Project release []: 0.1 If the documents are to be written in a language other than English, you can select a language here by its language code. Sphinx will then translate text that it generates into that language. For a list of supported codes, see http://sphinx-doc.org/config.html#confval-language. > Project language [en]: The file name suffix for source files. Commonly, this is either \".txt\" or \".rst\". Only files with this suffix are considered documents. > Source file suffix [.rst]: One document is special in that it is considered the top node of the \"contents tree\", that is, it is the root of the hierarchical structure of the documents. Normally, this is \"index\", but if your \"index\" document is a custom template, you can also set this to another filename. > Name of your master document (without suffix) [index]: Sphinx can also add configuration for epub output: > Do you want to use the epub builder (y/n) [n]: Indicate which of the following Sphinx extensions should be enabled: > autodoc: automatically insert docstrings from modules (y/n) [n]: y > doctest: automatically test code snippets in doctest blocks (y/n) [n]: > intersphinx: link between Sphinx documentation of different projects (y/n) [n]: > todo: write \"todo\" entries that can be shown or hidden on build (y/n) [n]: > coverage: checks for documentation coverage (y/n) [n]: > imgmath: include math, rendered as PNG or SVG images (y/n) [n]: > mathjax: include math, rendered in the browser by MathJax (y/n) [n]: y > ifconfig: conditional inclusion of content based on config values (y/n) [n]: > viewcode: include links to the source code of documented Python objects (y/n) [n]: y > githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]: A Makefile and a Windows command file can be generated for you so that you only have to run e.g. make html instead of invoking sphinx-build directly. > Create Makefile? (y/n) [y]: > Create Windows command file? (y/n) [y]: n Creating file ./source/conf.py. Creating file ./source/index.rst. Creating file ./Makefile. Finished: An initial directory structure has been created. You should now populate your master file ./source/index.rst and create other documentation source files. Use the Makefile to build the docs, like so: make builder where \"builder\" is one of the supported builders, e.g. html, latex or linkcheck. Edit Source Files # In this section, I will give instructions for how to make a minimum set of rst files so you can see how it works. If you want to look at source code for other websites, I recommend the following projects, which all have links at the top for \u201cEdit on GitHub\u201d that let you see the rst file source. Chemper: http://chemper.readthedocs.io/en/latest/ Openforcefield: http://open-forcefield-toolkit.readthedocs.io/en/latest/installation.html The link for these source files says \u201cSource\u201d in the menu bar at the top 50 Examples for Teaching Python: http://fiftyexamples.readthedocs.io/en/latest/index.html In the rest of this section I will tell you where these files should be and what to put in them to get this example working. index.rst # This file by default is in the source file, however, if your build is going to see all your code you should move it up to your top directory file. Initially your file should look something like this: .. shapes2 documentation master file, created by sphinx-quickstart on Fri Jul 20 17:51:08 2018. You can adapt this file completely to your liking, but it should at least contain the root `toctree` directive. Welcome to shapes2's documentation! =================================== .. toctree:: :maxdepth: 2 :caption: Contents: Indices and tables ================== * :ref:`genindex` * :ref:`modindex` * :ref:`search` We are going to make 3 more rst files, you should put their names in the table of contents tree (toctree) by putting their names under the caption, indented like this: .. toctree:: :maxdepth: 2 :caption: Contents: docs/source/intro docs/source/functions docs/source/examples intro.rst # In docs/source make a file called intro.rst , mine has this: Introduction ============ Write an introduction here Contributors ------------ * `Caitlin C. Bannan (UCI) <https://github.com/bannanc>`_ Here\u2019s some new formatting: \\==== under a line make a Title ----- under makes a subtitle The ` ` with \\<> around a link followed by _ will put in an extral link so that line will look like: Caitlin C. Bannan (UCI) function.rst # This file will use Sphinx\u2019s auto fill to fill in a custom function or class. Mine looks like this: Functions ========= Functions are separated by shape and calculation. To see an example of them in action checkout :ref:`examples` Square ------ .. autofunction:: shapes.square.area.area_square .. autofunction:: shapes.square.perimeter.perimeter_square Triangle -------- .. autofunction:: shapes.triangle.area.area_triangle In this implementation it assumes you\u2019re using the Google stype doc strings, such as the one shown below. If you want to use a different doc style you will have to look up how to change your conf.py file.: def area_square(length): \"\"\" Calculates the area of a square. Parameters ---------- length (float or int) length of one side of a square Returns ------- area (float) - area of the square \"\"\" return length ** 2 This will automatically grab the functions shapes.square\u2026 etc. You can also do this with classes, and it will show all classes and their doc strings. Here is the area_square output on our website: examples.rst # This file will allow you to show example jupyter notebooks you\u2019ve created on your documentation website. This handy as your user can see a complicated use example that they can also download and play with from github if they want to. .. _examples: Examples ======== Below are links to examples for inputing jupyter notebooks into your website .. toctree:: :maxdepth: 1 ../examples/example_notebook.ipynb You can list multiple notebooks, just like the toctree in intro.rst, you can also include these in any toctree in any file you choose. Edit Configuration Files # Now we will change the files which are used to build your website pages Makefile # This file is located in the docs folder, not in source. We moved the index file up to the top directory so sphinx could find all your code and jupyter notebooks. However, we need to tell the Makefile that. Note, I don\u2019t know anything else about this file, it is possible there are fancier things you can do witht he Makefile, but I\u2019ve always just used the default besides this one change, on line 8 ish, change the SOURCEDIR variable: SOURCEDIR = ../ conf.py # These are suggested changes for the conf file, it was originally at sources/conf.py, but it also needs to be moved to the top directory. Remember, that these are all just suggestions to make the format used in chemper, this file is very customizeable so you may end up needing to change other things. I also don\u2019t understand this well enough to justify all of these decisions. So All I\u2019m going to show what to change: uncomment out import os approx line 15 update the extensions list to include all of the following: about line 41 extensions = [ 'sphinx.ext.autodoc', 'sphinx.ext.autosummary', 'sphinx.ext.mathjax', 'sphinx.ext.viewcode', 'sphinx.ext.napoleon', 'sphinx.ext.intersphinx' 'nbsphinx', ] Set the exclude_patterns as below: about line 73 exclude_patterns = ['_build', '**.ipynb_checkpoints'] Comment out the line html_theme = 'alabaster' and add this below it: about line 83 # html_theme = 'alabaster' on_rtd = os.environ.get('READTHEDOCS', None) == 'True' if not on_rtd: # only import and set the theme if we're building docs locally import sphinx_rtd_theme html_theme = 'sphinx_rtd_theme' html_theme_path = [sphinx_rtd_theme.get_html_theme_path()] html_context = { 'css_files': [ '_static/theme_overrides.css' ] } else: html_context = { 'css_files': [ '//media.readthedocs.org/css/sphinx_rtd_theme.css', '//media.readthedocs.org/css/readthedocs-doc-embed.css', '_static/theme_overrides.css' ] } update html_sidebars to the following about line 126 This I can explain, these are things I did not want included in the side bar of my home website, you can play around with these to see if you want them included or not. html_sidebars = { '**': [ 'about.html', 'navigation.html', 'relations.html', # needs 'show_related': True theme option to display 'searchbox.html', # 'donate.html', see if I actually need this one ] } environment.yml # This is a yml file similar, but simpler than the travis yml file. It tells sphinx/readthedocs which python modules you need to install. Here is what is in my simple example, you\u2019ll need all dependencies for your package. (Side note - technically my example tool doesn\u2019t use openeye, but I wanted an example that included the channels being required. This can also be a list like the dependencies section, just include any conda channel necessary for your dependencies). name: chemper channels: - openeye dependencies: - python==3.5 - openeye-toolkits - numpydoc - pip - pip: - nbsphinx .readthedocs.yml # This file is in the top directory and tells readthedocs to use conda to install your python environment. It is very short and calls your environment file: conda: file: docs/environment.yml python: setup_py_install: true version: 3.5 extra_requirements: - tests - docs Check your build # In the directory with your MakeFile run the following command: make html To see your build open the file build/html/index.html, this is not a public website yet, but you should be able to use all of your links. Push all these files to GitHub # Next you want to add all of these files to a branch in your github repository (this can be master, but below I include directions for how to see the build on other branches as well). Set Up ReadTheDocs # If you don\u2019t own your repository, you\u2019ll need to ask the owner (or organization admin) to give you permission in order to do these steps. As in they have to give your username permission, though if you\u2019re on a group project you should all agree on who is creatting the doc website. Setup account # Go to readthedocs.io and log in through github, its been a while since I did this for the first time, but I think you just say log in with github and then check a box giving it permission to access your repositories. Create new project on readthedocs: # Chose import a project Find the repository you want to make a documentation page for and click on the \u201c Assign a name and chose repository type \u201cGit\u201d Note this name has to be unique, that is there can\u2019t be any other readthedocs projects with this name, it is used for your [project].readthedocs.io website. If your project name is available use thate, but if note you may have to come up with a variation Note - For most projects the default advanced options should be fine, but they include options to add a description or a link to the projects home page and tags for your documentation. I believe these can be accessed again after creation, but I\u2019ve never used anything except the defaults. Project Settings # Now we will make some small adjustments to make sure your documents are building. You can do this under Admin on the menu bar: In the sections below, I have descriptions for the things you might want to change. These will not be written in order, but include the important options on the side bar: Settings # In this section you can change the \u201cadvanced\u201d settings we ignored when initially building the project, however, there shouldn\u2019t be anything you HAVE to change here. Versions # On this menu you can chose which branchs from your project you want to have documentation built for. This is handy for testing your documentation before pushing it into the master branch. So you should select active next under that branch name: Then you can chose if you want it to be public, there are also protected and private builds, but I\u2019m not sure who can(not) see the other options\u2026 Trigger a build # You can force a new build on your project by going to \u201cBuilds\u201d on the main menu and pressing the \u201cBuild Version\u201d button. Check out your website # Add Badge to your Repo # Like Travis and CodeCov, ReadTheDocs has a badge you can add to your repository. On the homepage of the read the docs for your project on the right side you should see this: If you click on the badge itself, there are options for RST, MarkDown, or HTML that will allow you to add this badge to your repo. Website # The website for your docs uses the name you created during setup in the form [name].readthedocs.io","title":"ReadTheDocs_and_Sphinx"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#what_is_included_here","text":"In this file, I will walk you through a minimum example of how to set up a documentation website that is formatted based on one theme ( chemper ). The read the docs website has extensive documentation and there are A TON of different themes out there. This is intended to help you understand how to get started.","title":"What is included here"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#disclaimer","text":"Below is a step by step guide, however, there is a STEEP learning curve on Read the Docs and its not particularly intuitive. In this tutorial, we assume you already have a working python package that is installable (see docs on setup files). This is intended to be a guide that shorter and easier to follow than the official Getting Started Guide, but you will likely need to look at outside resources.","title":"Disclaimer"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#rst_files","text":"Read the docs uses rst (reStructuredText) files. These are similar to MarkDown files (such as those used for GitHub README files and jupyter notebooks), in that they have formatting rules that are interpretted to change the format of the text. However, the formatting is significantly different from MarkDown. This file will not include instruction for this format, but might highlight some examples. Below is a list of links our group (Caitlin) has found useful for how to format these files. http://openalea.gforge.inria.fr/doc/openalea/doc/_build/html/source/sphinx/rest_syntax.html http://docutils.sourceforge.net/docs/user/rst/quickref.html https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst As with all languages it is usually fastest to just google what you want to do and follow the relevant discussion board answers","title":"RST files"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#building_doc_files_locally","text":"We will start on your computer, get some initial files set up before linking the website to your github repository.","title":"Building Doc Files Locally"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#download_sphinx_and_run_quickstart","text":"Install Sphinx pip install sphinx sphinx-autobuild sphinx_rtd_theme nbsphinx Make a docs directory to store files From inside the docs folder call sphinx-quickstart . Note that there are a ton of questions with this call, most of them we use the default, but I will put the full list below bolding the ones where I did not chose the default. A side note, the last question is \u201cCreate Windows command file? (y/n) [y]: n\u201d I was taught at MolSSI to say \u201cn\u201d to this and I don\u2019t know anyone on a windows computer to have used this program. You may need these files if you\u2019re going to check your build on a windows machine, I don\u2019t know. When done with this call you\u2019ll have a source/ and build/ directory in the docs directory, DO NOT add the build/ directory to your github, it is only there so you can see your output locally. (chemper_both) gitHub/shapes2 (docs)$ sphinx-quickstart Welcome to the Sphinx 1.7.6 quickstart utility. Please enter values for the following settings (just press Enter to accept a default value, if one is given in brackets). Selected root path: . You have two options for placing the build directory for Sphinx output. Either, you use a directory \"_build\" within the root path, or you separate \"source\" and \"build\" directories within the root path. > Separate source and build directories (y/n) [n]: y Inside the root directory, two more directories will be created; \"_templates\" for custom HTML templates and \"_static\" for custom stylesheets and other static files. You can enter another prefix (such as \".\") to replace the underscore. > Name prefix for templates and static dir [_]: The project name will occur in several places in the built documentation. > Project name: shapes > Author name(s): Caitlin C. Bannan > Project release []: 0.1 If the documents are to be written in a language other than English, you can select a language here by its language code. Sphinx will then translate text that it generates into that language. For a list of supported codes, see http://sphinx-doc.org/config.html#confval-language. > Project language [en]: The file name suffix for source files. Commonly, this is either \".txt\" or \".rst\". Only files with this suffix are considered documents. > Source file suffix [.rst]: One document is special in that it is considered the top node of the \"contents tree\", that is, it is the root of the hierarchical structure of the documents. Normally, this is \"index\", but if your \"index\" document is a custom template, you can also set this to another filename. > Name of your master document (without suffix) [index]: Sphinx can also add configuration for epub output: > Do you want to use the epub builder (y/n) [n]: Indicate which of the following Sphinx extensions should be enabled: > autodoc: automatically insert docstrings from modules (y/n) [n]: y > doctest: automatically test code snippets in doctest blocks (y/n) [n]: > intersphinx: link between Sphinx documentation of different projects (y/n) [n]: > todo: write \"todo\" entries that can be shown or hidden on build (y/n) [n]: > coverage: checks for documentation coverage (y/n) [n]: > imgmath: include math, rendered as PNG or SVG images (y/n) [n]: > mathjax: include math, rendered in the browser by MathJax (y/n) [n]: y > ifconfig: conditional inclusion of content based on config values (y/n) [n]: > viewcode: include links to the source code of documented Python objects (y/n) [n]: y > githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]: A Makefile and a Windows command file can be generated for you so that you only have to run e.g. make html instead of invoking sphinx-build directly. > Create Makefile? (y/n) [y]: > Create Windows command file? (y/n) [y]: n Creating file ./source/conf.py. Creating file ./source/index.rst. Creating file ./Makefile. Finished: An initial directory structure has been created. You should now populate your master file ./source/index.rst and create other documentation source files. Use the Makefile to build the docs, like so: make builder where \"builder\" is one of the supported builders, e.g. html, latex or linkcheck.","title":"Download Sphinx and run quickstart"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#edit_source_files","text":"In this section, I will give instructions for how to make a minimum set of rst files so you can see how it works. If you want to look at source code for other websites, I recommend the following projects, which all have links at the top for \u201cEdit on GitHub\u201d that let you see the rst file source. Chemper: http://chemper.readthedocs.io/en/latest/ Openforcefield: http://open-forcefield-toolkit.readthedocs.io/en/latest/installation.html The link for these source files says \u201cSource\u201d in the menu bar at the top 50 Examples for Teaching Python: http://fiftyexamples.readthedocs.io/en/latest/index.html In the rest of this section I will tell you where these files should be and what to put in them to get this example working.","title":"Edit Source Files"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#indexrst","text":"This file by default is in the source file, however, if your build is going to see all your code you should move it up to your top directory file. Initially your file should look something like this: .. shapes2 documentation master file, created by sphinx-quickstart on Fri Jul 20 17:51:08 2018. You can adapt this file completely to your liking, but it should at least contain the root `toctree` directive. Welcome to shapes2's documentation! =================================== .. toctree:: :maxdepth: 2 :caption: Contents: Indices and tables ================== * :ref:`genindex` * :ref:`modindex` * :ref:`search` We are going to make 3 more rst files, you should put their names in the table of contents tree (toctree) by putting their names under the caption, indented like this: .. toctree:: :maxdepth: 2 :caption: Contents: docs/source/intro docs/source/functions docs/source/examples","title":"index.rst"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#introrst","text":"In docs/source make a file called intro.rst , mine has this: Introduction ============ Write an introduction here Contributors ------------ * `Caitlin C. Bannan (UCI) <https://github.com/bannanc>`_ Here\u2019s some new formatting: \\==== under a line make a Title ----- under makes a subtitle The ` ` with \\<> around a link followed by _ will put in an extral link so that line will look like: Caitlin C. Bannan (UCI)","title":"intro.rst"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#functionrst","text":"This file will use Sphinx\u2019s auto fill to fill in a custom function or class. Mine looks like this: Functions ========= Functions are separated by shape and calculation. To see an example of them in action checkout :ref:`examples` Square ------ .. autofunction:: shapes.square.area.area_square .. autofunction:: shapes.square.perimeter.perimeter_square Triangle -------- .. autofunction:: shapes.triangle.area.area_triangle In this implementation it assumes you\u2019re using the Google stype doc strings, such as the one shown below. If you want to use a different doc style you will have to look up how to change your conf.py file.: def area_square(length): \"\"\" Calculates the area of a square. Parameters ---------- length (float or int) length of one side of a square Returns ------- area (float) - area of the square \"\"\" return length ** 2 This will automatically grab the functions shapes.square\u2026 etc. You can also do this with classes, and it will show all classes and their doc strings. Here is the area_square output on our website:","title":"function.rst"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#examplesrst","text":"This file will allow you to show example jupyter notebooks you\u2019ve created on your documentation website. This handy as your user can see a complicated use example that they can also download and play with from github if they want to. .. _examples: Examples ======== Below are links to examples for inputing jupyter notebooks into your website .. toctree:: :maxdepth: 1 ../examples/example_notebook.ipynb You can list multiple notebooks, just like the toctree in intro.rst, you can also include these in any toctree in any file you choose.","title":"examples.rst"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#edit_configuration_files","text":"Now we will change the files which are used to build your website pages","title":"Edit Configuration Files"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#makefile","text":"This file is located in the docs folder, not in source. We moved the index file up to the top directory so sphinx could find all your code and jupyter notebooks. However, we need to tell the Makefile that. Note, I don\u2019t know anything else about this file, it is possible there are fancier things you can do witht he Makefile, but I\u2019ve always just used the default besides this one change, on line 8 ish, change the SOURCEDIR variable: SOURCEDIR = ../","title":"Makefile"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#confpy","text":"These are suggested changes for the conf file, it was originally at sources/conf.py, but it also needs to be moved to the top directory. Remember, that these are all just suggestions to make the format used in chemper, this file is very customizeable so you may end up needing to change other things. I also don\u2019t understand this well enough to justify all of these decisions. So All I\u2019m going to show what to change: uncomment out import os approx line 15 update the extensions list to include all of the following: about line 41 extensions = [ 'sphinx.ext.autodoc', 'sphinx.ext.autosummary', 'sphinx.ext.mathjax', 'sphinx.ext.viewcode', 'sphinx.ext.napoleon', 'sphinx.ext.intersphinx' 'nbsphinx', ] Set the exclude_patterns as below: about line 73 exclude_patterns = ['_build', '**.ipynb_checkpoints'] Comment out the line html_theme = 'alabaster' and add this below it: about line 83 # html_theme = 'alabaster' on_rtd = os.environ.get('READTHEDOCS', None) == 'True' if not on_rtd: # only import and set the theme if we're building docs locally import sphinx_rtd_theme html_theme = 'sphinx_rtd_theme' html_theme_path = [sphinx_rtd_theme.get_html_theme_path()] html_context = { 'css_files': [ '_static/theme_overrides.css' ] } else: html_context = { 'css_files': [ '//media.readthedocs.org/css/sphinx_rtd_theme.css', '//media.readthedocs.org/css/readthedocs-doc-embed.css', '_static/theme_overrides.css' ] } update html_sidebars to the following about line 126 This I can explain, these are things I did not want included in the side bar of my home website, you can play around with these to see if you want them included or not. html_sidebars = { '**': [ 'about.html', 'navigation.html', 'relations.html', # needs 'show_related': True theme option to display 'searchbox.html', # 'donate.html', see if I actually need this one ] }","title":"conf.py"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#environmentyml","text":"This is a yml file similar, but simpler than the travis yml file. It tells sphinx/readthedocs which python modules you need to install. Here is what is in my simple example, you\u2019ll need all dependencies for your package. (Side note - technically my example tool doesn\u2019t use openeye, but I wanted an example that included the channels being required. This can also be a list like the dependencies section, just include any conda channel necessary for your dependencies). name: chemper channels: - openeye dependencies: - python==3.5 - openeye-toolkits - numpydoc - pip - pip: - nbsphinx","title":"environment.yml"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#readthedocsyml","text":"This file is in the top directory and tells readthedocs to use conda to install your python environment. It is very short and calls your environment file: conda: file: docs/environment.yml python: setup_py_install: true version: 3.5 extra_requirements: - tests - docs","title":".readthedocs.yml"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#check_your_build","text":"In the directory with your MakeFile run the following command: make html To see your build open the file build/html/index.html, this is not a public website yet, but you should be able to use all of your links.","title":"Check your build"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#push_all_these_files_to_github","text":"Next you want to add all of these files to a branch in your github repository (this can be master, but below I include directions for how to see the build on other branches as well).","title":"Push all these files to GitHub"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#set_up_readthedocs","text":"If you don\u2019t own your repository, you\u2019ll need to ask the owner (or organization admin) to give you permission in order to do these steps. As in they have to give your username permission, though if you\u2019re on a group project you should all agree on who is creatting the doc website.","title":"Set Up ReadTheDocs"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#setup_account","text":"Go to readthedocs.io and log in through github, its been a while since I did this for the first time, but I think you just say log in with github and then check a box giving it permission to access your repositories.","title":"Setup account"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#create_new_project_on_readthedocs","text":"Chose import a project Find the repository you want to make a documentation page for and click on the \u201c Assign a name and chose repository type \u201cGit\u201d Note this name has to be unique, that is there can\u2019t be any other readthedocs projects with this name, it is used for your [project].readthedocs.io website. If your project name is available use thate, but if note you may have to come up with a variation Note - For most projects the default advanced options should be fine, but they include options to add a description or a link to the projects home page and tags for your documentation. I believe these can be accessed again after creation, but I\u2019ve never used anything except the defaults.","title":"Create new project on readthedocs:"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#project_settings","text":"Now we will make some small adjustments to make sure your documents are building. You can do this under Admin on the menu bar: In the sections below, I have descriptions for the things you might want to change. These will not be written in order, but include the important options on the side bar:","title":"Project Settings"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#settings","text":"In this section you can change the \u201cadvanced\u201d settings we ignored when initially building the project, however, there shouldn\u2019t be anything you HAVE to change here.","title":"Settings"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#versions","text":"On this menu you can chose which branchs from your project you want to have documentation built for. This is handy for testing your documentation before pushing it into the master branch. So you should select active next under that branch name: Then you can chose if you want it to be public, there are also protected and private builds, but I\u2019m not sure who can(not) see the other options\u2026","title":"Versions"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#trigger_a_build","text":"You can force a new build on your project by going to \u201cBuilds\u201d on the main menu and pressing the \u201cBuild Version\u201d button.","title":"Trigger a build"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#check_out_your_website","text":"","title":"Check out your website"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#add_badge_to_your_repo","text":"Like Travis and CodeCov, ReadTheDocs has a badge you can add to your repository. On the homepage of the read the docs for your project on the right side you should see this: If you click on the badge itself, there are options for RST, MarkDown, or HTML that will allow you to add this badge to your repo.","title":"Add Badge to your Repo"},{"location":"GitHub_Tutorials/ReadTheDocs_and_Sphinx/#website","text":"The website for your docs uses the name you created during setup in the form [name].readthedocs.io","title":"Website"},{"location":"source/","text":"Coding_Tutorials Anaconda IDE Jupyter_Notebooks MarkDown GitHub_Tutorials Code_Coverage Encrypting_on_Travis GitHub_Cloning GitHub_Creating_a_Repository GitHub_Forking GitHub_Getting_Started GitHub_Issues GitHub_Pull_Requests GitHub_Working_Locally Integrated_Testing ReadTheDocs_and_Sphinx","title":"Home"}]}